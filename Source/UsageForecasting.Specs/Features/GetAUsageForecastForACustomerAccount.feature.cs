// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UsageForecasting.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Get A Usage Forecast For A Customer Account")]
    [NUnit.Framework.CategoryAttribute("UsageForecasting")]
    public partial class GetAUsageForecastForACustomerAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GetAUsageForecastForACustomerAccount.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Get A Usage Forecast For A Customer Account", "In order to facilitate pricing\r\nAs an api consumer\r\nI want to get a forecast of i" +
                    "nterval usage for a customer account", ProgrammingLanguage.CSharp, new string[] {
                        "UsageForecasting"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line 8
  testRunner.Given("a usage forecast service");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can obtain a forecast of for an account date range")]
        public virtual void CanObtainAForecastOfForAnAccountDateRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can obtain a forecast of for an account date range", ((string[])(null)));
#line 10
 this.ScenarioSetup(scenarioInfo);
#line 7
 this.FeatureBackground();
#line 11
  testRunner.Given("an account");
#line 12
  testRunner.When("getting an {hourly} forecast from {1/1/2015} to {1/31/2015}");
#line 13
  testRunner.Then("a usage forecast response is returned");
#line 14
  testRunner.Then("the response has {744} usages");
#line 15
  testRunner.Then("the minimum usage start date is {1/1/2015}");
#line 16
  testRunner.Then("the maximum usage end date is {1/31/2015}");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
