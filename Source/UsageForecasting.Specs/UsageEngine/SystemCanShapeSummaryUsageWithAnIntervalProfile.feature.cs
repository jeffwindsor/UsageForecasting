// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UsageForecasting.Specs.UsageEngine
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("System Can Shape Summary Usage With An Interval Profile")]
    [NUnit.Framework.CategoryAttribute("Usage")]
    [NUnit.Framework.CategoryAttribute("Profiling")]
    public partial class SystemCanShapeSummaryUsageWithAnIntervalProfileFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SystemCanShapeSummaryUsageWithAnIntervalProfile.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "System Can Shape Summary Usage With An Interval Profile", "As a usage forecaster\r\n  I want to be able to profile summary usage\r\n  So that a " +
                    "the result can be blended with other usage to get an accurate usage forecast for" +
                    " an account", ProgrammingLanguage.CSharp, new string[] {
                        "Usage",
                        "Profiling"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The profile completely covers the summary usage")]
        public virtual void TheProfileCompletelyCoversTheSummaryUsage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The profile completely covers the summary usage", ((string[])(null)));
#line 8
 this.ScenarioSetup(scenarioInfo);
#line 9
  testRunner.Given("a summary usage for {1000} {kWh} from {1/1/2012} to {1/31/2012}");
#line 10
    testRunner.And("an hourly profile from {1/1/2012} to {1/31/2012}");
#line 11
   testRunner.When("the usage forecaster requests the summary usage be profiled");
#line 12
   testRunner.Then("the usage engine should return a profiled summary");
#line 13
    testRunner.And("the profiled summaries should range from {1/1/2012} to {1/31/2012}");
#line 14
    testRunner.And("the profiled summary values should be equal to the profile value times the unit v" +
                    "alue");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
